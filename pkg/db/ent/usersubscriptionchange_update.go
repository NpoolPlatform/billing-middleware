// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/billing-middleware/pkg/db/ent/predicate"
	"github.com/NpoolPlatform/billing-middleware/pkg/db/ent/usersubscriptionchange"
	"github.com/google/uuid"
)

// UserSubscriptionChangeUpdate is the builder for updating UserSubscriptionChange entities.
type UserSubscriptionChangeUpdate struct {
	config
	hooks     []Hook
	mutation  *UserSubscriptionChangeMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the UserSubscriptionChangeUpdate builder.
func (uscu *UserSubscriptionChangeUpdate) Where(ps ...predicate.UserSubscriptionChange) *UserSubscriptionChangeUpdate {
	uscu.mutation.Where(ps...)
	return uscu
}

// SetCreatedAt sets the "created_at" field.
func (uscu *UserSubscriptionChangeUpdate) SetCreatedAt(u uint32) *UserSubscriptionChangeUpdate {
	uscu.mutation.ResetCreatedAt()
	uscu.mutation.SetCreatedAt(u)
	return uscu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uscu *UserSubscriptionChangeUpdate) SetNillableCreatedAt(u *uint32) *UserSubscriptionChangeUpdate {
	if u != nil {
		uscu.SetCreatedAt(*u)
	}
	return uscu
}

// AddCreatedAt adds u to the "created_at" field.
func (uscu *UserSubscriptionChangeUpdate) AddCreatedAt(u int32) *UserSubscriptionChangeUpdate {
	uscu.mutation.AddCreatedAt(u)
	return uscu
}

// SetUpdatedAt sets the "updated_at" field.
func (uscu *UserSubscriptionChangeUpdate) SetUpdatedAt(u uint32) *UserSubscriptionChangeUpdate {
	uscu.mutation.ResetUpdatedAt()
	uscu.mutation.SetUpdatedAt(u)
	return uscu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (uscu *UserSubscriptionChangeUpdate) AddUpdatedAt(u int32) *UserSubscriptionChangeUpdate {
	uscu.mutation.AddUpdatedAt(u)
	return uscu
}

// SetDeletedAt sets the "deleted_at" field.
func (uscu *UserSubscriptionChangeUpdate) SetDeletedAt(u uint32) *UserSubscriptionChangeUpdate {
	uscu.mutation.ResetDeletedAt()
	uscu.mutation.SetDeletedAt(u)
	return uscu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (uscu *UserSubscriptionChangeUpdate) SetNillableDeletedAt(u *uint32) *UserSubscriptionChangeUpdate {
	if u != nil {
		uscu.SetDeletedAt(*u)
	}
	return uscu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (uscu *UserSubscriptionChangeUpdate) AddDeletedAt(u int32) *UserSubscriptionChangeUpdate {
	uscu.mutation.AddDeletedAt(u)
	return uscu
}

// SetEntID sets the "ent_id" field.
func (uscu *UserSubscriptionChangeUpdate) SetEntID(u uuid.UUID) *UserSubscriptionChangeUpdate {
	uscu.mutation.SetEntID(u)
	return uscu
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (uscu *UserSubscriptionChangeUpdate) SetNillableEntID(u *uuid.UUID) *UserSubscriptionChangeUpdate {
	if u != nil {
		uscu.SetEntID(*u)
	}
	return uscu
}

// SetAppID sets the "app_id" field.
func (uscu *UserSubscriptionChangeUpdate) SetAppID(u uuid.UUID) *UserSubscriptionChangeUpdate {
	uscu.mutation.SetAppID(u)
	return uscu
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (uscu *UserSubscriptionChangeUpdate) SetNillableAppID(u *uuid.UUID) *UserSubscriptionChangeUpdate {
	if u != nil {
		uscu.SetAppID(*u)
	}
	return uscu
}

// ClearAppID clears the value of the "app_id" field.
func (uscu *UserSubscriptionChangeUpdate) ClearAppID() *UserSubscriptionChangeUpdate {
	uscu.mutation.ClearAppID()
	return uscu
}

// SetUserID sets the "user_id" field.
func (uscu *UserSubscriptionChangeUpdate) SetUserID(u uuid.UUID) *UserSubscriptionChangeUpdate {
	uscu.mutation.SetUserID(u)
	return uscu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (uscu *UserSubscriptionChangeUpdate) SetNillableUserID(u *uuid.UUID) *UserSubscriptionChangeUpdate {
	if u != nil {
		uscu.SetUserID(*u)
	}
	return uscu
}

// ClearUserID clears the value of the "user_id" field.
func (uscu *UserSubscriptionChangeUpdate) ClearUserID() *UserSubscriptionChangeUpdate {
	uscu.mutation.ClearUserID()
	return uscu
}

// SetUserSubscriptionID sets the "user_subscription_id" field.
func (uscu *UserSubscriptionChangeUpdate) SetUserSubscriptionID(u uuid.UUID) *UserSubscriptionChangeUpdate {
	uscu.mutation.SetUserSubscriptionID(u)
	return uscu
}

// SetNillableUserSubscriptionID sets the "user_subscription_id" field if the given value is not nil.
func (uscu *UserSubscriptionChangeUpdate) SetNillableUserSubscriptionID(u *uuid.UUID) *UserSubscriptionChangeUpdate {
	if u != nil {
		uscu.SetUserSubscriptionID(*u)
	}
	return uscu
}

// ClearUserSubscriptionID clears the value of the "user_subscription_id" field.
func (uscu *UserSubscriptionChangeUpdate) ClearUserSubscriptionID() *UserSubscriptionChangeUpdate {
	uscu.mutation.ClearUserSubscriptionID()
	return uscu
}

// SetOldPackageID sets the "old_package_id" field.
func (uscu *UserSubscriptionChangeUpdate) SetOldPackageID(u uuid.UUID) *UserSubscriptionChangeUpdate {
	uscu.mutation.SetOldPackageID(u)
	return uscu
}

// SetNillableOldPackageID sets the "old_package_id" field if the given value is not nil.
func (uscu *UserSubscriptionChangeUpdate) SetNillableOldPackageID(u *uuid.UUID) *UserSubscriptionChangeUpdate {
	if u != nil {
		uscu.SetOldPackageID(*u)
	}
	return uscu
}

// ClearOldPackageID clears the value of the "old_package_id" field.
func (uscu *UserSubscriptionChangeUpdate) ClearOldPackageID() *UserSubscriptionChangeUpdate {
	uscu.mutation.ClearOldPackageID()
	return uscu
}

// SetNewPackageID sets the "new_package_id" field.
func (uscu *UserSubscriptionChangeUpdate) SetNewPackageID(u uuid.UUID) *UserSubscriptionChangeUpdate {
	uscu.mutation.SetNewPackageID(u)
	return uscu
}

// SetNillableNewPackageID sets the "new_package_id" field if the given value is not nil.
func (uscu *UserSubscriptionChangeUpdate) SetNillableNewPackageID(u *uuid.UUID) *UserSubscriptionChangeUpdate {
	if u != nil {
		uscu.SetNewPackageID(*u)
	}
	return uscu
}

// ClearNewPackageID clears the value of the "new_package_id" field.
func (uscu *UserSubscriptionChangeUpdate) ClearNewPackageID() *UserSubscriptionChangeUpdate {
	uscu.mutation.ClearNewPackageID()
	return uscu
}

// Mutation returns the UserSubscriptionChangeMutation object of the builder.
func (uscu *UserSubscriptionChangeUpdate) Mutation() *UserSubscriptionChangeMutation {
	return uscu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uscu *UserSubscriptionChangeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := uscu.defaults(); err != nil {
		return 0, err
	}
	if len(uscu.hooks) == 0 {
		affected, err = uscu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserSubscriptionChangeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			uscu.mutation = mutation
			affected, err = uscu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(uscu.hooks) - 1; i >= 0; i-- {
			if uscu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = uscu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uscu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (uscu *UserSubscriptionChangeUpdate) SaveX(ctx context.Context) int {
	affected, err := uscu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uscu *UserSubscriptionChangeUpdate) Exec(ctx context.Context) error {
	_, err := uscu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uscu *UserSubscriptionChangeUpdate) ExecX(ctx context.Context) {
	if err := uscu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uscu *UserSubscriptionChangeUpdate) defaults() error {
	if _, ok := uscu.mutation.UpdatedAt(); !ok {
		if usersubscriptionchange.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized usersubscriptionchange.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := usersubscriptionchange.UpdateDefaultUpdatedAt()
		uscu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (uscu *UserSubscriptionChangeUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *UserSubscriptionChangeUpdate {
	uscu.modifiers = append(uscu.modifiers, modifiers...)
	return uscu
}

func (uscu *UserSubscriptionChangeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   usersubscriptionchange.Table,
			Columns: usersubscriptionchange.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: usersubscriptionchange.FieldID,
			},
		},
	}
	if ps := uscu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uscu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: usersubscriptionchange.FieldCreatedAt,
		})
	}
	if value, ok := uscu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: usersubscriptionchange.FieldCreatedAt,
		})
	}
	if value, ok := uscu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: usersubscriptionchange.FieldUpdatedAt,
		})
	}
	if value, ok := uscu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: usersubscriptionchange.FieldUpdatedAt,
		})
	}
	if value, ok := uscu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: usersubscriptionchange.FieldDeletedAt,
		})
	}
	if value, ok := uscu.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: usersubscriptionchange.FieldDeletedAt,
		})
	}
	if value, ok := uscu.mutation.EntID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: usersubscriptionchange.FieldEntID,
		})
	}
	if value, ok := uscu.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: usersubscriptionchange.FieldAppID,
		})
	}
	if uscu.mutation.AppIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: usersubscriptionchange.FieldAppID,
		})
	}
	if value, ok := uscu.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: usersubscriptionchange.FieldUserID,
		})
	}
	if uscu.mutation.UserIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: usersubscriptionchange.FieldUserID,
		})
	}
	if value, ok := uscu.mutation.UserSubscriptionID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: usersubscriptionchange.FieldUserSubscriptionID,
		})
	}
	if uscu.mutation.UserSubscriptionIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: usersubscriptionchange.FieldUserSubscriptionID,
		})
	}
	if value, ok := uscu.mutation.OldPackageID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: usersubscriptionchange.FieldOldPackageID,
		})
	}
	if uscu.mutation.OldPackageIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: usersubscriptionchange.FieldOldPackageID,
		})
	}
	if value, ok := uscu.mutation.NewPackageID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: usersubscriptionchange.FieldNewPackageID,
		})
	}
	if uscu.mutation.NewPackageIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: usersubscriptionchange.FieldNewPackageID,
		})
	}
	_spec.Modifiers = uscu.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, uscu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usersubscriptionchange.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// UserSubscriptionChangeUpdateOne is the builder for updating a single UserSubscriptionChange entity.
type UserSubscriptionChangeUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *UserSubscriptionChangeMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (uscuo *UserSubscriptionChangeUpdateOne) SetCreatedAt(u uint32) *UserSubscriptionChangeUpdateOne {
	uscuo.mutation.ResetCreatedAt()
	uscuo.mutation.SetCreatedAt(u)
	return uscuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uscuo *UserSubscriptionChangeUpdateOne) SetNillableCreatedAt(u *uint32) *UserSubscriptionChangeUpdateOne {
	if u != nil {
		uscuo.SetCreatedAt(*u)
	}
	return uscuo
}

// AddCreatedAt adds u to the "created_at" field.
func (uscuo *UserSubscriptionChangeUpdateOne) AddCreatedAt(u int32) *UserSubscriptionChangeUpdateOne {
	uscuo.mutation.AddCreatedAt(u)
	return uscuo
}

// SetUpdatedAt sets the "updated_at" field.
func (uscuo *UserSubscriptionChangeUpdateOne) SetUpdatedAt(u uint32) *UserSubscriptionChangeUpdateOne {
	uscuo.mutation.ResetUpdatedAt()
	uscuo.mutation.SetUpdatedAt(u)
	return uscuo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (uscuo *UserSubscriptionChangeUpdateOne) AddUpdatedAt(u int32) *UserSubscriptionChangeUpdateOne {
	uscuo.mutation.AddUpdatedAt(u)
	return uscuo
}

// SetDeletedAt sets the "deleted_at" field.
func (uscuo *UserSubscriptionChangeUpdateOne) SetDeletedAt(u uint32) *UserSubscriptionChangeUpdateOne {
	uscuo.mutation.ResetDeletedAt()
	uscuo.mutation.SetDeletedAt(u)
	return uscuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (uscuo *UserSubscriptionChangeUpdateOne) SetNillableDeletedAt(u *uint32) *UserSubscriptionChangeUpdateOne {
	if u != nil {
		uscuo.SetDeletedAt(*u)
	}
	return uscuo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (uscuo *UserSubscriptionChangeUpdateOne) AddDeletedAt(u int32) *UserSubscriptionChangeUpdateOne {
	uscuo.mutation.AddDeletedAt(u)
	return uscuo
}

// SetEntID sets the "ent_id" field.
func (uscuo *UserSubscriptionChangeUpdateOne) SetEntID(u uuid.UUID) *UserSubscriptionChangeUpdateOne {
	uscuo.mutation.SetEntID(u)
	return uscuo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (uscuo *UserSubscriptionChangeUpdateOne) SetNillableEntID(u *uuid.UUID) *UserSubscriptionChangeUpdateOne {
	if u != nil {
		uscuo.SetEntID(*u)
	}
	return uscuo
}

// SetAppID sets the "app_id" field.
func (uscuo *UserSubscriptionChangeUpdateOne) SetAppID(u uuid.UUID) *UserSubscriptionChangeUpdateOne {
	uscuo.mutation.SetAppID(u)
	return uscuo
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (uscuo *UserSubscriptionChangeUpdateOne) SetNillableAppID(u *uuid.UUID) *UserSubscriptionChangeUpdateOne {
	if u != nil {
		uscuo.SetAppID(*u)
	}
	return uscuo
}

// ClearAppID clears the value of the "app_id" field.
func (uscuo *UserSubscriptionChangeUpdateOne) ClearAppID() *UserSubscriptionChangeUpdateOne {
	uscuo.mutation.ClearAppID()
	return uscuo
}

// SetUserID sets the "user_id" field.
func (uscuo *UserSubscriptionChangeUpdateOne) SetUserID(u uuid.UUID) *UserSubscriptionChangeUpdateOne {
	uscuo.mutation.SetUserID(u)
	return uscuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (uscuo *UserSubscriptionChangeUpdateOne) SetNillableUserID(u *uuid.UUID) *UserSubscriptionChangeUpdateOne {
	if u != nil {
		uscuo.SetUserID(*u)
	}
	return uscuo
}

// ClearUserID clears the value of the "user_id" field.
func (uscuo *UserSubscriptionChangeUpdateOne) ClearUserID() *UserSubscriptionChangeUpdateOne {
	uscuo.mutation.ClearUserID()
	return uscuo
}

// SetUserSubscriptionID sets the "user_subscription_id" field.
func (uscuo *UserSubscriptionChangeUpdateOne) SetUserSubscriptionID(u uuid.UUID) *UserSubscriptionChangeUpdateOne {
	uscuo.mutation.SetUserSubscriptionID(u)
	return uscuo
}

// SetNillableUserSubscriptionID sets the "user_subscription_id" field if the given value is not nil.
func (uscuo *UserSubscriptionChangeUpdateOne) SetNillableUserSubscriptionID(u *uuid.UUID) *UserSubscriptionChangeUpdateOne {
	if u != nil {
		uscuo.SetUserSubscriptionID(*u)
	}
	return uscuo
}

// ClearUserSubscriptionID clears the value of the "user_subscription_id" field.
func (uscuo *UserSubscriptionChangeUpdateOne) ClearUserSubscriptionID() *UserSubscriptionChangeUpdateOne {
	uscuo.mutation.ClearUserSubscriptionID()
	return uscuo
}

// SetOldPackageID sets the "old_package_id" field.
func (uscuo *UserSubscriptionChangeUpdateOne) SetOldPackageID(u uuid.UUID) *UserSubscriptionChangeUpdateOne {
	uscuo.mutation.SetOldPackageID(u)
	return uscuo
}

// SetNillableOldPackageID sets the "old_package_id" field if the given value is not nil.
func (uscuo *UserSubscriptionChangeUpdateOne) SetNillableOldPackageID(u *uuid.UUID) *UserSubscriptionChangeUpdateOne {
	if u != nil {
		uscuo.SetOldPackageID(*u)
	}
	return uscuo
}

// ClearOldPackageID clears the value of the "old_package_id" field.
func (uscuo *UserSubscriptionChangeUpdateOne) ClearOldPackageID() *UserSubscriptionChangeUpdateOne {
	uscuo.mutation.ClearOldPackageID()
	return uscuo
}

// SetNewPackageID sets the "new_package_id" field.
func (uscuo *UserSubscriptionChangeUpdateOne) SetNewPackageID(u uuid.UUID) *UserSubscriptionChangeUpdateOne {
	uscuo.mutation.SetNewPackageID(u)
	return uscuo
}

// SetNillableNewPackageID sets the "new_package_id" field if the given value is not nil.
func (uscuo *UserSubscriptionChangeUpdateOne) SetNillableNewPackageID(u *uuid.UUID) *UserSubscriptionChangeUpdateOne {
	if u != nil {
		uscuo.SetNewPackageID(*u)
	}
	return uscuo
}

// ClearNewPackageID clears the value of the "new_package_id" field.
func (uscuo *UserSubscriptionChangeUpdateOne) ClearNewPackageID() *UserSubscriptionChangeUpdateOne {
	uscuo.mutation.ClearNewPackageID()
	return uscuo
}

// Mutation returns the UserSubscriptionChangeMutation object of the builder.
func (uscuo *UserSubscriptionChangeUpdateOne) Mutation() *UserSubscriptionChangeMutation {
	return uscuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uscuo *UserSubscriptionChangeUpdateOne) Select(field string, fields ...string) *UserSubscriptionChangeUpdateOne {
	uscuo.fields = append([]string{field}, fields...)
	return uscuo
}

// Save executes the query and returns the updated UserSubscriptionChange entity.
func (uscuo *UserSubscriptionChangeUpdateOne) Save(ctx context.Context) (*UserSubscriptionChange, error) {
	var (
		err  error
		node *UserSubscriptionChange
	)
	if err := uscuo.defaults(); err != nil {
		return nil, err
	}
	if len(uscuo.hooks) == 0 {
		node, err = uscuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserSubscriptionChangeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			uscuo.mutation = mutation
			node, err = uscuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(uscuo.hooks) - 1; i >= 0; i-- {
			if uscuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = uscuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, uscuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*UserSubscriptionChange)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from UserSubscriptionChangeMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (uscuo *UserSubscriptionChangeUpdateOne) SaveX(ctx context.Context) *UserSubscriptionChange {
	node, err := uscuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uscuo *UserSubscriptionChangeUpdateOne) Exec(ctx context.Context) error {
	_, err := uscuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uscuo *UserSubscriptionChangeUpdateOne) ExecX(ctx context.Context) {
	if err := uscuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uscuo *UserSubscriptionChangeUpdateOne) defaults() error {
	if _, ok := uscuo.mutation.UpdatedAt(); !ok {
		if usersubscriptionchange.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized usersubscriptionchange.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := usersubscriptionchange.UpdateDefaultUpdatedAt()
		uscuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (uscuo *UserSubscriptionChangeUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *UserSubscriptionChangeUpdateOne {
	uscuo.modifiers = append(uscuo.modifiers, modifiers...)
	return uscuo
}

func (uscuo *UserSubscriptionChangeUpdateOne) sqlSave(ctx context.Context) (_node *UserSubscriptionChange, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   usersubscriptionchange.Table,
			Columns: usersubscriptionchange.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: usersubscriptionchange.FieldID,
			},
		},
	}
	id, ok := uscuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserSubscriptionChange.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uscuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, usersubscriptionchange.FieldID)
		for _, f := range fields {
			if !usersubscriptionchange.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != usersubscriptionchange.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uscuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uscuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: usersubscriptionchange.FieldCreatedAt,
		})
	}
	if value, ok := uscuo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: usersubscriptionchange.FieldCreatedAt,
		})
	}
	if value, ok := uscuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: usersubscriptionchange.FieldUpdatedAt,
		})
	}
	if value, ok := uscuo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: usersubscriptionchange.FieldUpdatedAt,
		})
	}
	if value, ok := uscuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: usersubscriptionchange.FieldDeletedAt,
		})
	}
	if value, ok := uscuo.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: usersubscriptionchange.FieldDeletedAt,
		})
	}
	if value, ok := uscuo.mutation.EntID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: usersubscriptionchange.FieldEntID,
		})
	}
	if value, ok := uscuo.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: usersubscriptionchange.FieldAppID,
		})
	}
	if uscuo.mutation.AppIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: usersubscriptionchange.FieldAppID,
		})
	}
	if value, ok := uscuo.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: usersubscriptionchange.FieldUserID,
		})
	}
	if uscuo.mutation.UserIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: usersubscriptionchange.FieldUserID,
		})
	}
	if value, ok := uscuo.mutation.UserSubscriptionID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: usersubscriptionchange.FieldUserSubscriptionID,
		})
	}
	if uscuo.mutation.UserSubscriptionIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: usersubscriptionchange.FieldUserSubscriptionID,
		})
	}
	if value, ok := uscuo.mutation.OldPackageID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: usersubscriptionchange.FieldOldPackageID,
		})
	}
	if uscuo.mutation.OldPackageIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: usersubscriptionchange.FieldOldPackageID,
		})
	}
	if value, ok := uscuo.mutation.NewPackageID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: usersubscriptionchange.FieldNewPackageID,
		})
	}
	if uscuo.mutation.NewPackageIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: usersubscriptionchange.FieldNewPackageID,
		})
	}
	_spec.Modifiers = uscuo.modifiers
	_node = &UserSubscriptionChange{config: uscuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uscuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usersubscriptionchange.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
