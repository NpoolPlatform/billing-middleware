// Code generated by ent, DO NOT EDIT.

package exchange

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/billing-middleware/pkg/db/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uint32) predicate.Exchange {
	return predicate.Exchange(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint32) predicate.Exchange {
	return predicate.Exchange(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint32) predicate.Exchange {
	return predicate.Exchange(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint32) predicate.Exchange {
	return predicate.Exchange(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint32) predicate.Exchange {
	return predicate.Exchange(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint32) predicate.Exchange {
	return predicate.Exchange(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint32) predicate.Exchange {
	return predicate.Exchange(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint32) predicate.Exchange {
	return predicate.Exchange(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint32) predicate.Exchange {
	return predicate.Exchange(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v uint32) predicate.Exchange {
	return predicate.Exchange(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v uint32) predicate.Exchange {
	return predicate.Exchange(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v uint32) predicate.Exchange {
	return predicate.Exchange(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// EntID applies equality check predicate on the "ent_id" field. It's identical to EntIDEQ.
func EntID(v uuid.UUID) predicate.Exchange {
	return predicate.Exchange(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEntID), v))
	})
}

// AppID applies equality check predicate on the "app_id" field. It's identical to AppIDEQ.
func AppID(v uuid.UUID) predicate.Exchange {
	return predicate.Exchange(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAppID), v))
	})
}

// UsageType applies equality check predicate on the "usage_type" field. It's identical to UsageTypeEQ.
func UsageType(v string) predicate.Exchange {
	return predicate.Exchange(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUsageType), v))
	})
}

// Credit applies equality check predicate on the "credit" field. It's identical to CreditEQ.
func Credit(v uint32) predicate.Exchange {
	return predicate.Exchange(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCredit), v))
	})
}

// ExchangeThreshold applies equality check predicate on the "exchange_threshold" field. It's identical to ExchangeThresholdEQ.
func ExchangeThreshold(v uint32) predicate.Exchange {
	return predicate.Exchange(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExchangeThreshold), v))
	})
}

// Path applies equality check predicate on the "path" field. It's identical to PathEQ.
func Path(v string) predicate.Exchange {
	return predicate.Exchange(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPath), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v uint32) predicate.Exchange {
	return predicate.Exchange(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v uint32) predicate.Exchange {
	return predicate.Exchange(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...uint32) predicate.Exchange {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Exchange(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...uint32) predicate.Exchange {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Exchange(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v uint32) predicate.Exchange {
	return predicate.Exchange(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v uint32) predicate.Exchange {
	return predicate.Exchange(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v uint32) predicate.Exchange {
	return predicate.Exchange(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v uint32) predicate.Exchange {
	return predicate.Exchange(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v uint32) predicate.Exchange {
	return predicate.Exchange(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v uint32) predicate.Exchange {
	return predicate.Exchange(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...uint32) predicate.Exchange {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Exchange(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...uint32) predicate.Exchange {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Exchange(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v uint32) predicate.Exchange {
	return predicate.Exchange(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v uint32) predicate.Exchange {
	return predicate.Exchange(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v uint32) predicate.Exchange {
	return predicate.Exchange(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v uint32) predicate.Exchange {
	return predicate.Exchange(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v uint32) predicate.Exchange {
	return predicate.Exchange(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v uint32) predicate.Exchange {
	return predicate.Exchange(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...uint32) predicate.Exchange {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Exchange(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...uint32) predicate.Exchange {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Exchange(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v uint32) predicate.Exchange {
	return predicate.Exchange(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v uint32) predicate.Exchange {
	return predicate.Exchange(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v uint32) predicate.Exchange {
	return predicate.Exchange(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v uint32) predicate.Exchange {
	return predicate.Exchange(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// EntIDEQ applies the EQ predicate on the "ent_id" field.
func EntIDEQ(v uuid.UUID) predicate.Exchange {
	return predicate.Exchange(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEntID), v))
	})
}

// EntIDNEQ applies the NEQ predicate on the "ent_id" field.
func EntIDNEQ(v uuid.UUID) predicate.Exchange {
	return predicate.Exchange(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEntID), v))
	})
}

// EntIDIn applies the In predicate on the "ent_id" field.
func EntIDIn(vs ...uuid.UUID) predicate.Exchange {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Exchange(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldEntID), v...))
	})
}

// EntIDNotIn applies the NotIn predicate on the "ent_id" field.
func EntIDNotIn(vs ...uuid.UUID) predicate.Exchange {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Exchange(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldEntID), v...))
	})
}

// EntIDGT applies the GT predicate on the "ent_id" field.
func EntIDGT(v uuid.UUID) predicate.Exchange {
	return predicate.Exchange(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEntID), v))
	})
}

// EntIDGTE applies the GTE predicate on the "ent_id" field.
func EntIDGTE(v uuid.UUID) predicate.Exchange {
	return predicate.Exchange(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEntID), v))
	})
}

// EntIDLT applies the LT predicate on the "ent_id" field.
func EntIDLT(v uuid.UUID) predicate.Exchange {
	return predicate.Exchange(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEntID), v))
	})
}

// EntIDLTE applies the LTE predicate on the "ent_id" field.
func EntIDLTE(v uuid.UUID) predicate.Exchange {
	return predicate.Exchange(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEntID), v))
	})
}

// AppIDEQ applies the EQ predicate on the "app_id" field.
func AppIDEQ(v uuid.UUID) predicate.Exchange {
	return predicate.Exchange(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAppID), v))
	})
}

// AppIDNEQ applies the NEQ predicate on the "app_id" field.
func AppIDNEQ(v uuid.UUID) predicate.Exchange {
	return predicate.Exchange(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAppID), v))
	})
}

// AppIDIn applies the In predicate on the "app_id" field.
func AppIDIn(vs ...uuid.UUID) predicate.Exchange {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Exchange(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldAppID), v...))
	})
}

// AppIDNotIn applies the NotIn predicate on the "app_id" field.
func AppIDNotIn(vs ...uuid.UUID) predicate.Exchange {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Exchange(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldAppID), v...))
	})
}

// AppIDGT applies the GT predicate on the "app_id" field.
func AppIDGT(v uuid.UUID) predicate.Exchange {
	return predicate.Exchange(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAppID), v))
	})
}

// AppIDGTE applies the GTE predicate on the "app_id" field.
func AppIDGTE(v uuid.UUID) predicate.Exchange {
	return predicate.Exchange(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAppID), v))
	})
}

// AppIDLT applies the LT predicate on the "app_id" field.
func AppIDLT(v uuid.UUID) predicate.Exchange {
	return predicate.Exchange(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAppID), v))
	})
}

// AppIDLTE applies the LTE predicate on the "app_id" field.
func AppIDLTE(v uuid.UUID) predicate.Exchange {
	return predicate.Exchange(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAppID), v))
	})
}

// AppIDIsNil applies the IsNil predicate on the "app_id" field.
func AppIDIsNil() predicate.Exchange {
	return predicate.Exchange(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAppID)))
	})
}

// AppIDNotNil applies the NotNil predicate on the "app_id" field.
func AppIDNotNil() predicate.Exchange {
	return predicate.Exchange(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAppID)))
	})
}

// UsageTypeEQ applies the EQ predicate on the "usage_type" field.
func UsageTypeEQ(v string) predicate.Exchange {
	return predicate.Exchange(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUsageType), v))
	})
}

// UsageTypeNEQ applies the NEQ predicate on the "usage_type" field.
func UsageTypeNEQ(v string) predicate.Exchange {
	return predicate.Exchange(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUsageType), v))
	})
}

// UsageTypeIn applies the In predicate on the "usage_type" field.
func UsageTypeIn(vs ...string) predicate.Exchange {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Exchange(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUsageType), v...))
	})
}

// UsageTypeNotIn applies the NotIn predicate on the "usage_type" field.
func UsageTypeNotIn(vs ...string) predicate.Exchange {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Exchange(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUsageType), v...))
	})
}

// UsageTypeGT applies the GT predicate on the "usage_type" field.
func UsageTypeGT(v string) predicate.Exchange {
	return predicate.Exchange(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUsageType), v))
	})
}

// UsageTypeGTE applies the GTE predicate on the "usage_type" field.
func UsageTypeGTE(v string) predicate.Exchange {
	return predicate.Exchange(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUsageType), v))
	})
}

// UsageTypeLT applies the LT predicate on the "usage_type" field.
func UsageTypeLT(v string) predicate.Exchange {
	return predicate.Exchange(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUsageType), v))
	})
}

// UsageTypeLTE applies the LTE predicate on the "usage_type" field.
func UsageTypeLTE(v string) predicate.Exchange {
	return predicate.Exchange(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUsageType), v))
	})
}

// UsageTypeContains applies the Contains predicate on the "usage_type" field.
func UsageTypeContains(v string) predicate.Exchange {
	return predicate.Exchange(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUsageType), v))
	})
}

// UsageTypeHasPrefix applies the HasPrefix predicate on the "usage_type" field.
func UsageTypeHasPrefix(v string) predicate.Exchange {
	return predicate.Exchange(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUsageType), v))
	})
}

// UsageTypeHasSuffix applies the HasSuffix predicate on the "usage_type" field.
func UsageTypeHasSuffix(v string) predicate.Exchange {
	return predicate.Exchange(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUsageType), v))
	})
}

// UsageTypeIsNil applies the IsNil predicate on the "usage_type" field.
func UsageTypeIsNil() predicate.Exchange {
	return predicate.Exchange(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUsageType)))
	})
}

// UsageTypeNotNil applies the NotNil predicate on the "usage_type" field.
func UsageTypeNotNil() predicate.Exchange {
	return predicate.Exchange(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUsageType)))
	})
}

// UsageTypeEqualFold applies the EqualFold predicate on the "usage_type" field.
func UsageTypeEqualFold(v string) predicate.Exchange {
	return predicate.Exchange(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUsageType), v))
	})
}

// UsageTypeContainsFold applies the ContainsFold predicate on the "usage_type" field.
func UsageTypeContainsFold(v string) predicate.Exchange {
	return predicate.Exchange(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUsageType), v))
	})
}

// CreditEQ applies the EQ predicate on the "credit" field.
func CreditEQ(v uint32) predicate.Exchange {
	return predicate.Exchange(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCredit), v))
	})
}

// CreditNEQ applies the NEQ predicate on the "credit" field.
func CreditNEQ(v uint32) predicate.Exchange {
	return predicate.Exchange(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCredit), v))
	})
}

// CreditIn applies the In predicate on the "credit" field.
func CreditIn(vs ...uint32) predicate.Exchange {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Exchange(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCredit), v...))
	})
}

// CreditNotIn applies the NotIn predicate on the "credit" field.
func CreditNotIn(vs ...uint32) predicate.Exchange {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Exchange(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCredit), v...))
	})
}

// CreditGT applies the GT predicate on the "credit" field.
func CreditGT(v uint32) predicate.Exchange {
	return predicate.Exchange(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCredit), v))
	})
}

// CreditGTE applies the GTE predicate on the "credit" field.
func CreditGTE(v uint32) predicate.Exchange {
	return predicate.Exchange(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCredit), v))
	})
}

// CreditLT applies the LT predicate on the "credit" field.
func CreditLT(v uint32) predicate.Exchange {
	return predicate.Exchange(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCredit), v))
	})
}

// CreditLTE applies the LTE predicate on the "credit" field.
func CreditLTE(v uint32) predicate.Exchange {
	return predicate.Exchange(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCredit), v))
	})
}

// CreditIsNil applies the IsNil predicate on the "credit" field.
func CreditIsNil() predicate.Exchange {
	return predicate.Exchange(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCredit)))
	})
}

// CreditNotNil applies the NotNil predicate on the "credit" field.
func CreditNotNil() predicate.Exchange {
	return predicate.Exchange(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCredit)))
	})
}

// ExchangeThresholdEQ applies the EQ predicate on the "exchange_threshold" field.
func ExchangeThresholdEQ(v uint32) predicate.Exchange {
	return predicate.Exchange(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExchangeThreshold), v))
	})
}

// ExchangeThresholdNEQ applies the NEQ predicate on the "exchange_threshold" field.
func ExchangeThresholdNEQ(v uint32) predicate.Exchange {
	return predicate.Exchange(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldExchangeThreshold), v))
	})
}

// ExchangeThresholdIn applies the In predicate on the "exchange_threshold" field.
func ExchangeThresholdIn(vs ...uint32) predicate.Exchange {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Exchange(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldExchangeThreshold), v...))
	})
}

// ExchangeThresholdNotIn applies the NotIn predicate on the "exchange_threshold" field.
func ExchangeThresholdNotIn(vs ...uint32) predicate.Exchange {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Exchange(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldExchangeThreshold), v...))
	})
}

// ExchangeThresholdGT applies the GT predicate on the "exchange_threshold" field.
func ExchangeThresholdGT(v uint32) predicate.Exchange {
	return predicate.Exchange(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldExchangeThreshold), v))
	})
}

// ExchangeThresholdGTE applies the GTE predicate on the "exchange_threshold" field.
func ExchangeThresholdGTE(v uint32) predicate.Exchange {
	return predicate.Exchange(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldExchangeThreshold), v))
	})
}

// ExchangeThresholdLT applies the LT predicate on the "exchange_threshold" field.
func ExchangeThresholdLT(v uint32) predicate.Exchange {
	return predicate.Exchange(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldExchangeThreshold), v))
	})
}

// ExchangeThresholdLTE applies the LTE predicate on the "exchange_threshold" field.
func ExchangeThresholdLTE(v uint32) predicate.Exchange {
	return predicate.Exchange(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldExchangeThreshold), v))
	})
}

// ExchangeThresholdIsNil applies the IsNil predicate on the "exchange_threshold" field.
func ExchangeThresholdIsNil() predicate.Exchange {
	return predicate.Exchange(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldExchangeThreshold)))
	})
}

// ExchangeThresholdNotNil applies the NotNil predicate on the "exchange_threshold" field.
func ExchangeThresholdNotNil() predicate.Exchange {
	return predicate.Exchange(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldExchangeThreshold)))
	})
}

// PathEQ applies the EQ predicate on the "path" field.
func PathEQ(v string) predicate.Exchange {
	return predicate.Exchange(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPath), v))
	})
}

// PathNEQ applies the NEQ predicate on the "path" field.
func PathNEQ(v string) predicate.Exchange {
	return predicate.Exchange(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPath), v))
	})
}

// PathIn applies the In predicate on the "path" field.
func PathIn(vs ...string) predicate.Exchange {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Exchange(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPath), v...))
	})
}

// PathNotIn applies the NotIn predicate on the "path" field.
func PathNotIn(vs ...string) predicate.Exchange {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Exchange(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPath), v...))
	})
}

// PathGT applies the GT predicate on the "path" field.
func PathGT(v string) predicate.Exchange {
	return predicate.Exchange(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPath), v))
	})
}

// PathGTE applies the GTE predicate on the "path" field.
func PathGTE(v string) predicate.Exchange {
	return predicate.Exchange(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPath), v))
	})
}

// PathLT applies the LT predicate on the "path" field.
func PathLT(v string) predicate.Exchange {
	return predicate.Exchange(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPath), v))
	})
}

// PathLTE applies the LTE predicate on the "path" field.
func PathLTE(v string) predicate.Exchange {
	return predicate.Exchange(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPath), v))
	})
}

// PathContains applies the Contains predicate on the "path" field.
func PathContains(v string) predicate.Exchange {
	return predicate.Exchange(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPath), v))
	})
}

// PathHasPrefix applies the HasPrefix predicate on the "path" field.
func PathHasPrefix(v string) predicate.Exchange {
	return predicate.Exchange(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPath), v))
	})
}

// PathHasSuffix applies the HasSuffix predicate on the "path" field.
func PathHasSuffix(v string) predicate.Exchange {
	return predicate.Exchange(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPath), v))
	})
}

// PathIsNil applies the IsNil predicate on the "path" field.
func PathIsNil() predicate.Exchange {
	return predicate.Exchange(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPath)))
	})
}

// PathNotNil applies the NotNil predicate on the "path" field.
func PathNotNil() predicate.Exchange {
	return predicate.Exchange(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPath)))
	})
}

// PathEqualFold applies the EqualFold predicate on the "path" field.
func PathEqualFold(v string) predicate.Exchange {
	return predicate.Exchange(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPath), v))
	})
}

// PathContainsFold applies the ContainsFold predicate on the "path" field.
func PathContainsFold(v string) predicate.Exchange {
	return predicate.Exchange(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPath), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Exchange) predicate.Exchange {
	return predicate.Exchange(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Exchange) predicate.Exchange {
	return predicate.Exchange(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Exchange) predicate.Exchange {
	return predicate.Exchange(func(s *sql.Selector) {
		p(s.Not())
	})
}
