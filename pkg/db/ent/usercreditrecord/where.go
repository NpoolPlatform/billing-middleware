// Code generated by ent, DO NOT EDIT.

package usercreditrecord

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/billing-middleware/pkg/db/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uint32) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint32) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint32) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint32) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint32) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint32) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint32) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint32) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint32) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v uint32) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v uint32) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v uint32) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// EntID applies equality check predicate on the "ent_id" field. It's identical to EntIDEQ.
func EntID(v uuid.UUID) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEntID), v))
	})
}

// AppID applies equality check predicate on the "app_id" field. It's identical to AppIDEQ.
func AppID(v uuid.UUID) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAppID), v))
	})
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uuid.UUID) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserID), v))
	})
}

// OperationType applies equality check predicate on the "operation_type" field. It's identical to OperationTypeEQ.
func OperationType(v string) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOperationType), v))
	})
}

// CreditsChange applies equality check predicate on the "credits_change" field. It's identical to CreditsChangeEQ.
func CreditsChange(v int32) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreditsChange), v))
	})
}

// Extra applies equality check predicate on the "extra" field. It's identical to ExtraEQ.
func Extra(v string) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExtra), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v uint32) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v uint32) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...uint32) predicate.UserCreditRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserCreditRecord(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...uint32) predicate.UserCreditRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserCreditRecord(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v uint32) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v uint32) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v uint32) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v uint32) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v uint32) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v uint32) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...uint32) predicate.UserCreditRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserCreditRecord(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...uint32) predicate.UserCreditRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserCreditRecord(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v uint32) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v uint32) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v uint32) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v uint32) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v uint32) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v uint32) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...uint32) predicate.UserCreditRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserCreditRecord(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...uint32) predicate.UserCreditRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserCreditRecord(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v uint32) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v uint32) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v uint32) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v uint32) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// EntIDEQ applies the EQ predicate on the "ent_id" field.
func EntIDEQ(v uuid.UUID) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEntID), v))
	})
}

// EntIDNEQ applies the NEQ predicate on the "ent_id" field.
func EntIDNEQ(v uuid.UUID) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEntID), v))
	})
}

// EntIDIn applies the In predicate on the "ent_id" field.
func EntIDIn(vs ...uuid.UUID) predicate.UserCreditRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserCreditRecord(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldEntID), v...))
	})
}

// EntIDNotIn applies the NotIn predicate on the "ent_id" field.
func EntIDNotIn(vs ...uuid.UUID) predicate.UserCreditRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserCreditRecord(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldEntID), v...))
	})
}

// EntIDGT applies the GT predicate on the "ent_id" field.
func EntIDGT(v uuid.UUID) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEntID), v))
	})
}

// EntIDGTE applies the GTE predicate on the "ent_id" field.
func EntIDGTE(v uuid.UUID) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEntID), v))
	})
}

// EntIDLT applies the LT predicate on the "ent_id" field.
func EntIDLT(v uuid.UUID) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEntID), v))
	})
}

// EntIDLTE applies the LTE predicate on the "ent_id" field.
func EntIDLTE(v uuid.UUID) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEntID), v))
	})
}

// AppIDEQ applies the EQ predicate on the "app_id" field.
func AppIDEQ(v uuid.UUID) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAppID), v))
	})
}

// AppIDNEQ applies the NEQ predicate on the "app_id" field.
func AppIDNEQ(v uuid.UUID) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAppID), v))
	})
}

// AppIDIn applies the In predicate on the "app_id" field.
func AppIDIn(vs ...uuid.UUID) predicate.UserCreditRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserCreditRecord(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldAppID), v...))
	})
}

// AppIDNotIn applies the NotIn predicate on the "app_id" field.
func AppIDNotIn(vs ...uuid.UUID) predicate.UserCreditRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserCreditRecord(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldAppID), v...))
	})
}

// AppIDGT applies the GT predicate on the "app_id" field.
func AppIDGT(v uuid.UUID) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAppID), v))
	})
}

// AppIDGTE applies the GTE predicate on the "app_id" field.
func AppIDGTE(v uuid.UUID) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAppID), v))
	})
}

// AppIDLT applies the LT predicate on the "app_id" field.
func AppIDLT(v uuid.UUID) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAppID), v))
	})
}

// AppIDLTE applies the LTE predicate on the "app_id" field.
func AppIDLTE(v uuid.UUID) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAppID), v))
	})
}

// AppIDIsNil applies the IsNil predicate on the "app_id" field.
func AppIDIsNil() predicate.UserCreditRecord {
	return predicate.UserCreditRecord(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAppID)))
	})
}

// AppIDNotNil applies the NotNil predicate on the "app_id" field.
func AppIDNotNil() predicate.UserCreditRecord {
	return predicate.UserCreditRecord(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAppID)))
	})
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uuid.UUID) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserID), v))
	})
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uuid.UUID) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUserID), v))
	})
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uuid.UUID) predicate.UserCreditRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserCreditRecord(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUserID), v...))
	})
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uuid.UUID) predicate.UserCreditRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserCreditRecord(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUserID), v...))
	})
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v uuid.UUID) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUserID), v))
	})
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v uuid.UUID) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUserID), v))
	})
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v uuid.UUID) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUserID), v))
	})
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v uuid.UUID) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUserID), v))
	})
}

// UserIDIsNil applies the IsNil predicate on the "user_id" field.
func UserIDIsNil() predicate.UserCreditRecord {
	return predicate.UserCreditRecord(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUserID)))
	})
}

// UserIDNotNil applies the NotNil predicate on the "user_id" field.
func UserIDNotNil() predicate.UserCreditRecord {
	return predicate.UserCreditRecord(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUserID)))
	})
}

// OperationTypeEQ applies the EQ predicate on the "operation_type" field.
func OperationTypeEQ(v string) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOperationType), v))
	})
}

// OperationTypeNEQ applies the NEQ predicate on the "operation_type" field.
func OperationTypeNEQ(v string) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOperationType), v))
	})
}

// OperationTypeIn applies the In predicate on the "operation_type" field.
func OperationTypeIn(vs ...string) predicate.UserCreditRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserCreditRecord(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldOperationType), v...))
	})
}

// OperationTypeNotIn applies the NotIn predicate on the "operation_type" field.
func OperationTypeNotIn(vs ...string) predicate.UserCreditRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserCreditRecord(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldOperationType), v...))
	})
}

// OperationTypeGT applies the GT predicate on the "operation_type" field.
func OperationTypeGT(v string) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOperationType), v))
	})
}

// OperationTypeGTE applies the GTE predicate on the "operation_type" field.
func OperationTypeGTE(v string) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOperationType), v))
	})
}

// OperationTypeLT applies the LT predicate on the "operation_type" field.
func OperationTypeLT(v string) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOperationType), v))
	})
}

// OperationTypeLTE applies the LTE predicate on the "operation_type" field.
func OperationTypeLTE(v string) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOperationType), v))
	})
}

// OperationTypeContains applies the Contains predicate on the "operation_type" field.
func OperationTypeContains(v string) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOperationType), v))
	})
}

// OperationTypeHasPrefix applies the HasPrefix predicate on the "operation_type" field.
func OperationTypeHasPrefix(v string) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOperationType), v))
	})
}

// OperationTypeHasSuffix applies the HasSuffix predicate on the "operation_type" field.
func OperationTypeHasSuffix(v string) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOperationType), v))
	})
}

// OperationTypeIsNil applies the IsNil predicate on the "operation_type" field.
func OperationTypeIsNil() predicate.UserCreditRecord {
	return predicate.UserCreditRecord(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOperationType)))
	})
}

// OperationTypeNotNil applies the NotNil predicate on the "operation_type" field.
func OperationTypeNotNil() predicate.UserCreditRecord {
	return predicate.UserCreditRecord(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOperationType)))
	})
}

// OperationTypeEqualFold applies the EqualFold predicate on the "operation_type" field.
func OperationTypeEqualFold(v string) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOperationType), v))
	})
}

// OperationTypeContainsFold applies the ContainsFold predicate on the "operation_type" field.
func OperationTypeContainsFold(v string) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOperationType), v))
	})
}

// CreditsChangeEQ applies the EQ predicate on the "credits_change" field.
func CreditsChangeEQ(v int32) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreditsChange), v))
	})
}

// CreditsChangeNEQ applies the NEQ predicate on the "credits_change" field.
func CreditsChangeNEQ(v int32) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreditsChange), v))
	})
}

// CreditsChangeIn applies the In predicate on the "credits_change" field.
func CreditsChangeIn(vs ...int32) predicate.UserCreditRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserCreditRecord(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreditsChange), v...))
	})
}

// CreditsChangeNotIn applies the NotIn predicate on the "credits_change" field.
func CreditsChangeNotIn(vs ...int32) predicate.UserCreditRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserCreditRecord(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreditsChange), v...))
	})
}

// CreditsChangeGT applies the GT predicate on the "credits_change" field.
func CreditsChangeGT(v int32) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreditsChange), v))
	})
}

// CreditsChangeGTE applies the GTE predicate on the "credits_change" field.
func CreditsChangeGTE(v int32) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreditsChange), v))
	})
}

// CreditsChangeLT applies the LT predicate on the "credits_change" field.
func CreditsChangeLT(v int32) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreditsChange), v))
	})
}

// CreditsChangeLTE applies the LTE predicate on the "credits_change" field.
func CreditsChangeLTE(v int32) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreditsChange), v))
	})
}

// CreditsChangeIsNil applies the IsNil predicate on the "credits_change" field.
func CreditsChangeIsNil() predicate.UserCreditRecord {
	return predicate.UserCreditRecord(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreditsChange)))
	})
}

// CreditsChangeNotNil applies the NotNil predicate on the "credits_change" field.
func CreditsChangeNotNil() predicate.UserCreditRecord {
	return predicate.UserCreditRecord(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreditsChange)))
	})
}

// ExtraEQ applies the EQ predicate on the "extra" field.
func ExtraEQ(v string) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExtra), v))
	})
}

// ExtraNEQ applies the NEQ predicate on the "extra" field.
func ExtraNEQ(v string) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldExtra), v))
	})
}

// ExtraIn applies the In predicate on the "extra" field.
func ExtraIn(vs ...string) predicate.UserCreditRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserCreditRecord(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldExtra), v...))
	})
}

// ExtraNotIn applies the NotIn predicate on the "extra" field.
func ExtraNotIn(vs ...string) predicate.UserCreditRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserCreditRecord(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldExtra), v...))
	})
}

// ExtraGT applies the GT predicate on the "extra" field.
func ExtraGT(v string) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldExtra), v))
	})
}

// ExtraGTE applies the GTE predicate on the "extra" field.
func ExtraGTE(v string) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldExtra), v))
	})
}

// ExtraLT applies the LT predicate on the "extra" field.
func ExtraLT(v string) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldExtra), v))
	})
}

// ExtraLTE applies the LTE predicate on the "extra" field.
func ExtraLTE(v string) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldExtra), v))
	})
}

// ExtraContains applies the Contains predicate on the "extra" field.
func ExtraContains(v string) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldExtra), v))
	})
}

// ExtraHasPrefix applies the HasPrefix predicate on the "extra" field.
func ExtraHasPrefix(v string) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldExtra), v))
	})
}

// ExtraHasSuffix applies the HasSuffix predicate on the "extra" field.
func ExtraHasSuffix(v string) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldExtra), v))
	})
}

// ExtraIsNil applies the IsNil predicate on the "extra" field.
func ExtraIsNil() predicate.UserCreditRecord {
	return predicate.UserCreditRecord(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldExtra)))
	})
}

// ExtraNotNil applies the NotNil predicate on the "extra" field.
func ExtraNotNil() predicate.UserCreditRecord {
	return predicate.UserCreditRecord(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldExtra)))
	})
}

// ExtraEqualFold applies the EqualFold predicate on the "extra" field.
func ExtraEqualFold(v string) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldExtra), v))
	})
}

// ExtraContainsFold applies the ContainsFold predicate on the "extra" field.
func ExtraContainsFold(v string) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldExtra), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UserCreditRecord) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UserCreditRecord) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UserCreditRecord) predicate.UserCreditRecord {
	return predicate.UserCreditRecord(func(s *sql.Selector) {
		p(s.Not())
	})
}
