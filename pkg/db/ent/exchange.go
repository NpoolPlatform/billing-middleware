// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/billing-middleware/pkg/db/ent/exchange"
	"github.com/google/uuid"
)

// Exchange is the model entity for the Exchange schema.
type Exchange struct {
	config `json:"-"`
	// ID of the ent.
	ID uint32 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt uint32 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt uint32 `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt uint32 `json:"deleted_at,omitempty"`
	// EntID holds the value of the "ent_id" field.
	EntID uuid.UUID `json:"ent_id,omitempty"`
	// AppID holds the value of the "app_id" field.
	AppID uuid.UUID `json:"app_id,omitempty"`
	// UsageType holds the value of the "usage_type" field.
	UsageType string `json:"usage_type,omitempty"`
	// Credit holds the value of the "credit" field.
	Credit uint32 `json:"credit,omitempty"`
	// ExchangeThreshold holds the value of the "exchange_threshold" field.
	ExchangeThreshold uint32 `json:"exchange_threshold,omitempty"`
	// Path holds the value of the "path" field.
	Path string `json:"path,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Exchange) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case exchange.FieldID, exchange.FieldCreatedAt, exchange.FieldUpdatedAt, exchange.FieldDeletedAt, exchange.FieldCredit, exchange.FieldExchangeThreshold:
			values[i] = new(sql.NullInt64)
		case exchange.FieldUsageType, exchange.FieldPath:
			values[i] = new(sql.NullString)
		case exchange.FieldEntID, exchange.FieldAppID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Exchange", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Exchange fields.
func (e *Exchange) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case exchange.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			e.ID = uint32(value.Int64)
		case exchange.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				e.CreatedAt = uint32(value.Int64)
			}
		case exchange.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				e.UpdatedAt = uint32(value.Int64)
			}
		case exchange.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				e.DeletedAt = uint32(value.Int64)
			}
		case exchange.FieldEntID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field ent_id", values[i])
			} else if value != nil {
				e.EntID = *value
			}
		case exchange.FieldAppID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value != nil {
				e.AppID = *value
			}
		case exchange.FieldUsageType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field usage_type", values[i])
			} else if value.Valid {
				e.UsageType = value.String
			}
		case exchange.FieldCredit:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field credit", values[i])
			} else if value.Valid {
				e.Credit = uint32(value.Int64)
			}
		case exchange.FieldExchangeThreshold:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field exchange_threshold", values[i])
			} else if value.Valid {
				e.ExchangeThreshold = uint32(value.Int64)
			}
		case exchange.FieldPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field path", values[i])
			} else if value.Valid {
				e.Path = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Exchange.
// Note that you need to call Exchange.Unwrap() before calling this method if this Exchange
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Exchange) Update() *ExchangeUpdateOne {
	return (&ExchangeClient{config: e.config}).UpdateOne(e)
}

// Unwrap unwraps the Exchange entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (e *Exchange) Unwrap() *Exchange {
	_tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("ent: Exchange is not a transactional entity")
	}
	e.config.driver = _tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Exchange) String() string {
	var builder strings.Builder
	builder.WriteString("Exchange(")
	builder.WriteString(fmt.Sprintf("id=%v, ", e.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", e.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", e.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", e.DeletedAt))
	builder.WriteString(", ")
	builder.WriteString("ent_id=")
	builder.WriteString(fmt.Sprintf("%v", e.EntID))
	builder.WriteString(", ")
	builder.WriteString("app_id=")
	builder.WriteString(fmt.Sprintf("%v", e.AppID))
	builder.WriteString(", ")
	builder.WriteString("usage_type=")
	builder.WriteString(e.UsageType)
	builder.WriteString(", ")
	builder.WriteString("credit=")
	builder.WriteString(fmt.Sprintf("%v", e.Credit))
	builder.WriteString(", ")
	builder.WriteString("exchange_threshold=")
	builder.WriteString(fmt.Sprintf("%v", e.ExchangeThreshold))
	builder.WriteString(", ")
	builder.WriteString("path=")
	builder.WriteString(e.Path)
	builder.WriteByte(')')
	return builder.String()
}

// Exchanges is a parsable slice of Exchange.
type Exchanges []*Exchange

func (e Exchanges) config(cfg config) {
	for _i := range e {
		e[_i].config = cfg
	}
}
